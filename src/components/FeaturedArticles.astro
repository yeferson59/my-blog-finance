---
import { Button } from "@/components/ui/button";
import type Post from "@/interfaces/post";
import fetchApi from "@/lib/strapi";
import { Image } from "astro:assets";
import { client } from "@/utils/redis";

let featuredPosts: Post[] = [];

if (!client.isOpen) {
  client
    .connect()
    .catch((err) => console.error("Error al conectar con Redis:", err));
}

try {
  const data = await client.get("featuredPosts");

  if (!data) {
    featuredPosts = await fetchApi<Post[]>({
      endpoint:
        "articles?fields[0]=title&fields[1]=description&fields[2]=pubDate&fields[3]=featured&fields[4]=slug&populate[cover][fields]=formats&populate[category][fields]=name",
      wrappedByKey: "data",
      method: "GET",
      query: {
        "pagination[page]": 1,
        "pagination[pageSize]": 6,
        sort: "pubDate:desc",
        "filters[featured][$eq]": true,
      },
    });
    // Guardar en Redis con expiración de 12 horas
    await client.set("featuredPosts", JSON.stringify(featuredPosts), {
      EX: 60 * 60 * 12,
    });
  } else {
    featuredPosts = JSON.parse(data);
  }
} catch (error) {
  console.error("Error al obtener los artículos:", error);
}

if (featuredPosts.length === 0) return;

// Función para optimizar la URL de la imagen
const optimizedImageUrl = (url: string, width: number, height: number) =>
  `${url}?f_auto,q_auto,w_${width},h_${height}`;

// Mapear las imágenes optimizadas
const featuredPostsImage = featuredPosts.map((article) => ({
  ...article,
  coverUrl: {
    small: optimizedImageUrl(article.cover.formats.small.url, 500, 391),
  },
}));

if (featuredPostsImage.length === 0) return;
---

<section
  id="featured-articles"
  class="w-full py-12 md:py-24 lg:py-32 bg-secondary-100 dark:bg-secondary-900"
>
  <div class="container px-4 md:px-6">
    <h2
      class="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl text-center mb-8 text-primary-800 dark:text-primary-200"
    >
      Artículos Destacados
    </h2>
    <div class="grid gap-6 lg:grid-cols-3">
      {
        featuredPostsImage.map(
          ({
            coverUrl: { small },
            cover: {
              formats: {
                small: { width, height },
              },
            },
            title,
            slug,
            description,
            category,
          }) => (
            <div class="rounded-lg border bg-card text-card-foreground shadow-sm">
              <Image
                src={small as any}
                alt={title}
                class="w-full h-48 object-cover rounded-t-lg"
                width={width}
                height={height}
                loading="lazy"
              />
              <div class="p-4">
                <h3 class="text-lg font-bold">{title}</h3>
                <p class="text-sm text-gray-500 dark:text-gray-400">
                  {description}
                </p>
                <div class="flex justify-between items-center">
                  <a href={`/blog/post/${slug}`} class="mt-2 inline-block">
                    <Button variant="outline">Leer más</Button>
                  </a>
                  <div class="gap-2">
                    <Button>{category.name}</Button>
                  </div>
                </div>
              </div>
            </div>
          ),
        )
      }
    </div>
  </div>
</section>
