---
// src/pages/post/[id].astro
import PostLayout from '@/layouts/PostLayout.astro';
import fetchApi from '@/lib/strapi';
import type Post from '@/interfaces/post';
import { BlocksRenderer } from '@strapi/blocks-react-renderer';
import type Header from '@/interfaces/header';

const { id } = Astro.params;
const user = Astro.locals.user;

const post = await fetchApi<Post>({
  endpoint: 'posts?populate[image][fields][0]=url&populate[authors][populate][avatar][fields][0]=url',
  wrappedByKey: 'data',
  wrappedByList: true,
  query: {
    'filters[slug][$eq]': id || '',
  },
  method: 'GET'
});

if (!post) {
  return Astro.redirect('/404');
}

const { slug, title, content, image, updatedAt, pubDate, authors } = post;
const { url: postImageUrl } = image;

const path = import.meta.env.STRAPI_URL;

interface StrapiBlock {
  id: string;
  type: string;
  children?: { text: string }[];
  level?: number;
  // Añade más propiedades según sea necesario
}

// Extraer los encabezados para la tabla de contenidos
const headers: Header[] = content
  .filter((block: StrapiBlock): block is StrapiBlock & { type: 'heading', level: number } => 
    block.type === 'heading' && typeof block.level === 'number')
  .map((block: StrapiBlock & { type: 'heading', level: number }) => ({
    id: block.id,
    text: block.children?.[0]?.text ?? '',
    level: block.level
  }));
---

<PostLayout
  title={title} 
  pubDate={new Date(pubDate)} 
  updatedDate={new Date(updatedAt)} 
  heroImage={path + postImageUrl} 
  slug={slug} 
  authors={authors}
  user={user}
  headers={headers}
>
  <BlocksRenderer content={content as any} />
</PostLayout>