---
// src/pages/post/[id].astro
import PostLayout from "@/layouts/PostLayout.astro";
import fetchApi from "@/lib/strapi";
import type Post from "@/interfaces/post";
import type Header from "@/interfaces/header";
import { BlocksRenderer } from "@strapi/blocks-react-renderer";
const { id } = Astro.params;
const user = Astro.locals.user;

const post = await fetchApi<Post>({
  endpoint:
    "articles?populate[cover][fields][0]=url&populate[author][populate][avatar][fields]=url&populate=blocks",
  wrappedByKey: "data",
  wrappedByList: true,
  query: {
    "filters[slug][$eq]": id || "",
  },
  method: "GET",
});

if (!post) {
  return Astro.redirect("/404");
}

const {
  slug,
  title,
  blocks,
  cover,
  updatedAt,
  pubDate,
  author,
  id: articleId,
} = post;
const { url: postImageUrl } = cover;

interface StrapiBlock {
  id: string;
  type: string;
  children?: { text: string }[];
  level?: number;
  // Añade más propiedades según sea necesario
}

const content: any[] = blocks.filter(
  (block: any) => (block.____component = "shared.rich-text")
);

const body: StrapiBlock[] = content[0].body;

// Extraer los encabezados para la tabla de contenidos
const headers: Header[] = body
  .filter(
    (
      block: StrapiBlock
    ): block is StrapiBlock & { type: "heading"; level: number } =>
      block.type === "heading" && typeof block.level === "number"
  )
  .map((block: StrapiBlock & { type: "heading"; level: number }) => ({
    id: block.id,
    text: block.children?.[0]?.text ?? "",
    level: block.level,
  }));
---

<PostLayout
  id={articleId}
  title={title}
  pubDate={new Date(pubDate)}
  updatedDate={new Date(updatedAt)}
  heroImage={postImageUrl}
  slug={slug}
  author={author}
  user={user}
  headers={headers}
>
  <BlocksRenderer content={body as any} />
</PostLayout>
