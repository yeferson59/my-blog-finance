---
// src/pages/post/[id].astro
import PostLayout from "@/layouts/PostLayout.astro";
import fetchApi from "@/lib/strapi";
import type Post from "@/interfaces/post";
import type Header from "@/interfaces/header";
import { BlocksRenderer } from "@strapi/blocks-react-renderer";
import { client } from "@/utils/redis";

// Asegúrate de que Redis esté conectado
if (!client.isOpen) {
  client
    .connect()
    .catch((err) => console.error("Error al conectar con Redis:", err));
}

const { id } = Astro.params;
const user = Astro.locals.user;

let post: Post | null = null;

// Intenta cargar el artículo desde Redis
const cacheKey = `post:${id}`;
try {
  const cachedData = await client.get(cacheKey);

  if (cachedData) {
    post = JSON.parse(cachedData);
    console.log(`Cargando desde caché: ${cacheKey}`);
  } else {
    // Si no está en Redis, consulta Strapi
    post = await fetchApi<Post>({
      endpoint:
        "articles?populate[cover][fields][0]=url&populate[author][populate][avatar][fields]=url&populate=blocks",
      wrappedByKey: "data",
      wrappedByList: true,
      query: {
        "filters[slug][$eq]": id || "",
      },
      method: "GET",
    });

    if (post) {
      // Guarda en Redis con expiración de 6 horas
      await client.set(cacheKey, JSON.stringify(post), { EX: 60 * 60 * 6 });
    }
  }
} catch (error) {
  console.error("Error al obtener datos del artículo:", error);
  throw new Error("Error fetching data");
}

// Si no hay datos, redirige a la página 404
if (!post) {
  return Astro.redirect("/404");
}

const {
  slug,
  title,
  blocks,
  cover,
  updatedAt,
  pubDate,
  author,
  id: articleId,
  documentId,
} = post;

const { url: postImageUrl } = cover;

interface StrapiBlock {
  id: string;
  type: string;
  children?: { text: string }[];
  level?: number;
}

const content: any[] = blocks.filter(
  (block: any) => (block.____component = "shared.rich-text"),
);

const body: StrapiBlock[] = content[0].body;

// Extraer los encabezados para la tabla de contenidos
const headers: Header[] = body
  .filter(
    (
      block: StrapiBlock,
    ): block is StrapiBlock & { type: "heading"; level: number } =>
      block.type === "heading" && typeof block.level === "number",
  )
  .map((block: StrapiBlock & { type: "heading"; level: number }) => ({
    id: crypto.randomUUID(),
    text: block.children?.[0]?.text ?? "",
    level: block.level,
  }));

// Configurar headers de caché HTTP
Astro.response.headers.set(
  "cache-control",
  "public, max-age=3600, must-revalidate",
);
Astro.response.headers.set("netlify-cache-tag", id!);
---

<PostLayout
  id={articleId}
  title={title}
  pubDate={new Date(pubDate)}
  updatedDate={new Date(updatedAt)}
  heroImage={postImageUrl}
  slug={slug}
  author={author}
  user={user}
  headers={headers}
  documentId={documentId}
>
  <BlocksRenderer content={body as any} />
</PostLayout>
