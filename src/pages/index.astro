---
// src/pages/index.astro
import HeroSection from "@/components/HeroSection.astro";
import FeaturedArticles from "@/components/FeaturedArticles.astro";
import TechnologySection from "@/components/TechnologySection.astro";
import FinanceSection from "@/components/FinanceSection.astro";
import AllPostsSection from "@/components/AllPostsSection.astro";
import NewsletterSection from "@/components/NewsletterSection.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import type Post from "@/interfaces/post";
import fetchApi from "@/lib/strapi";
import { client } from "@/utils/redis";

let allPosts: Post[] = [];

// Intenta obtener los posts desde Redis
client.on("error", (err) => console.error("Redis error:", err));
client.connect();
let data = await client.get("allPosts");

try {
  if (!data) {
    // Si no hay datos en Redis, consulta la API
    allPosts = await fetchApi<Post[]>({
      endpoint:
        "articles?fields[0]=title&fields[1]=description&fields[2]=pubDate&fields[3]=featured&fields[4]=slug&populate[cover][fields]=formats&populate[category][fields]=name,slug",
      wrappedByKey: "data",
      method: "GET",
      query: {
        "pagination[page]": 1,
        "pagination[pageSize]": 6,
        sort: "pubDate:desc",
      },
    });

    // Guarda los datos en Redis con expiración de 12 horas (43200 segundos)
    const key = "allPosts";
    const value = JSON.stringify(allPosts);
    await client.set(key, value, { EX: 60 * 60 * 12 });
  } else {
    // Si los datos están en Redis, los parseamos
    allPosts = JSON.parse(data);
  }
} catch (error) {
  console.error("Error al obtener los artículos:", error);
} finally {
  // Asegúrate de cerrar la conexión solo después de terminar las operaciones
  await client.disconnect();
}

//Astro.response.headers.set(
//  "cache-control",
//  "public, max-age=0, must-revalidate",
//);

const optimizedImageUrl = (url: string, width: number, height: number) =>
  `${url}?f_auto,q_auto,w_${width},h_${height}`;

const articles = allPosts.map((article) => ({
  ...article,
  coverUrl: {
    small: optimizedImageUrl(article.cover.formats.small.url, 500, 391),
  },
}));
---

<BaseLayout title="Inicio blog" imageUrl="" type="website">
  <HeroSection />
  <TechnologySection posts={articles} />
  <FinanceSection posts={articles} />
  <FeaturedArticles allPosts={articles} />
  <AllPostsSection posts={articles} />
  <NewsletterSection />
</BaseLayout>
